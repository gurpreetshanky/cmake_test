import notfile ;
import common ;

path-constant TOP : . ;

# generate current version information 
Echo [ SHELL "$(TOP)/app/version.sh $(TOP)" ] ;

# generate tagging information to be used when installing binaries
local tag = [ SHELL "$(TOP)/scripts/tag.sh" ] ;
constant TAG : $(tag) ;

# use ccache if it exists
local CCACHE = [ common.find-tool ccache ] ;

# add custom flags to gcc
using gcc : : $(CCACHE) g++
:
    <cxxflags>-std=c++14
    <cxxflags>-Werror
    <cxxflags>-Wall
;

# extra flags for the `prod` build variant (extends bjam's default `release` variant)
variant prod : release 
: 
    <cxxflags>-ggdb1 
    <cxxflags>-fno-builtin-malloc
    <cxxflags>-fno-builtin-calloc
    <cxxflags>-fno-builtin-realloc
    <cxxflags>-fno-builtin-free
    <find-static-library>tcmalloc_minimal
;

# flags for the entire project
project proj
: requirements
    <link>static
    <include>.
    <include>/usr/local/include
    <include>/usr/include
    <library-path>/usr/local/lib
    <library-path>/usr/lib64
    <library-path>/usr/lib/x86_64-linux-gnu
;

use-project /proj/foo  : foo ;
use-project /proj/bar  : bar ;

build-project foo ;
build-project bar ;
build-project app ;
build-project gui ;

import notfile ;
import common ;

path-constant TOP : . ;

# generate current version information 
# (done here because jam globbing doesn't pick up generated files on time if done in their respective jamfiles) 
Echo [ SHELL "$(TOP)/app/version.sh $(TOP)" ] ;

# generate tagging information to be used when installing binaries
local tag = [ SHELL "$(TOP)/scripts/tag.sh" ] ;
constant TAG : $(tag) ;

local CCACHE = [ common.find-tool ccache ] ;

using gcc : : $(CCACHE) g++
:
    <cxxflags>-std=c++14
    <cxxflags>-Werror
    <cxxflags>-Wall
    <cxxflags>-m64
    <cxxflags>-msse2
    <cxxflags>-msse4.2
    <cxxflags>-mfpmath=sse
    <cxxflags>-funroll-loops
    <cxxflags>-fdevirtualize
    <linkflags>-m64
    <linkflags>-rdynamic
    <linkflags>-lrt
;

using qt5 : $QTDIR ;

# build variants

variant prod : release 
: 
    <cxxflags>-ggdb1 
    <cxxflags>-fno-builtin-malloc
    <cxxflags>-fno-builtin-calloc
    <cxxflags>-fno-builtin-realloc
    <cxxflags>-fno-builtin-free
    <find-static-library>tcmalloc_minimal
;

project proj
  : requirements
    <link>static
    <include>.
    <include>/usr/local/include
    <include>/usr/include
    <library-path>/usr/local/lib
    <library-path>/usr/lib64
    <library-path>/usr/lib/x86_64-linux-gnu
    <find-shared-library>pthread
    <define>BOOST_DATE_TIME_POSIX_TIME_STD_CONFIG    
;

use-project /proj/lib1  : lib1 ;
use-project /proj/lib2  : lib2 ;

build-project lib1 ;
build-project lib2 ;
build-project app ;
build-project gui ;
